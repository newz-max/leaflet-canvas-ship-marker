{"version":3,"file":"leaflet-canvas-ship-marker.umd.js","sources":["../src/L.CanvasShip.js","../src/L.CustomCanvas.js"],"sourcesContent":["/**\n * 船舶图标绘制\n */\nclass CanvasShip extends L.Canvas.CustomCanvas {\n  _instance = null;\n\n  drawLayer() {\n    const {\n      options: { latlngs },\n      _map: map\n    } = this\n\n    // 数据处理部分（临时代码）\n    const res = latlngs.map((item) => {\n      const latlng = {}\n      if (!item.latlng) {\n        latlng.lat = item.lat\n        latlng.lng = item.lng\n      }\n      const result = {\n        latlng: map.latLngToContainerPoint(latlng),\n        deg: item.deg || 0\n      }\n      return result\n    })\n\n    this.drawShip(res)\n  }\n\n  /**\n   * 画船\n   * @param {Array} latlngs 船舶坐标点\n   */\n  drawShip(latlngs) {\n    const { _ctx: ctx } = this\n\n    /**\n     * 船舶图标旋转\n     * @param ctx canvas 实例\n     * @param x x 像素坐标位置\n     * @param y y 像素坐标位置\n     * @param deg 旋转角度\n     */\n    const rotateShip = (ctx, x, y, deg) => {\n      ctx.restore()\n      ctx.translate(0, 0)\n      ctx.save()\n      ctx.translate(x, y)\n      ctx.rotate((deg * Math.PI) / 180)\n    }\n\n    // 绘制船舶图标\n    latlngs.forEach((item, index) => {\n      let { x, y } = item.latlng\n      x = x * 2\n      y = y * 2\n\n      rotateShip(ctx, x, y, item.deg)\n\n      ctx.beginPath()\n      ctx.lineWidth = 2\n      ctx.moveTo(0, -20) // 从A（100,0）开始\n      ctx.lineTo(0, -20)\n      ctx.lineTo(7, -10)\n      ctx.lineTo(7, 20)\n      ctx.lineTo(-7, 20)\n      ctx.lineTo(-7, -10)\n      ctx.lineTo(0, -20)\n      ctx.fillStyle = '#ffff54'\n      ctx.fill() // 以填充方式绘制 默认黑色\n      // index === 0 && ctx.rotate(0)\n      ctx.stroke() // 闭合形状并且以填充方式绘制出来\n    })\n  }\n}\n\n/**\n * 船位、 航线、 航迹、 时间点 Canvas 绘制\n * @params {Object} options 初始化选项\n * @param options.latlngs 经纬度数组 [{lat : 纬度, lng:经度}]\n * @param options.deg 船舶航向 0-360\n * @return 创建的实例对象，将会是一个单例当重复创建时只会覆盖参数而不创建新的实例(暂未实现)\n */\nL.canvas.CanvasShip = (options) => {\n  // const { _instance } = CanvasShip\n  // let result\n  // if (_instance) {\n  //   console.warn(\n  //     '当前页面已存在一个 Leaflet CanvasShip 画布，将覆盖 Leaflet CanvasShip 画布参数'\n  //   )\n  //   result = _instance\n  //   L.setOptions(_instance, options)\n  // }\n\n  // if (!_instance) result = new CanvasShip(options)\n  const result = new CanvasShip(options)\n  return result\n}\n","/**\n * 船位、 航线、 航迹、 时间点 Canvas 绘制\n * @params {latlngs : [{lat : 纬度, lng:经度}]} options\n */\nL.Canvas.CustomCanvas = L.Layer.extend({\n  initialize(options = {}) {\n    L.setOptions(this, options)\n  },\n\n  onAdd(map) {\n    this.tiles = {}\n    this._container = map.getContainer()\n    this._map = map\n\n    // 创建 canvas dom 及实例\n    const canvas = this._initCanvas()\n\n    const pane = this.options.pane\n      ? map.getPanes()[this.options.pane]\n      : map._panes.overflowPane\n\n    // 插入 canvas dom\n    pane.appendChild(canvas)\n\n    // 注册事件\n    map.on(this.getEvents(), this)\n\n    // 绘制 canvas\n    this._update()\n  },\n\n  onRemove(){\n    const { _map:map , _ctx:ctx , _canvas:canvas} = this\n    canvas.remove()\n  },\n\n  // 初始化 canvas 实例\n  _initCanvas() {\n    const canvas = L.DomUtil.create('canvas', 'leaflet-ship')\n    const ctx = canvas.getContext('2d')\n\n    canvas.style.zIndex = '500'\n\n    this._canvas = canvas\n    this._ctx = ctx\n\n    this._onLayerDidResize()\n\n    // leaflet类名 可以在缩放过程中增加过渡动画\n    var animated = this._map.options.zoomAnimation && L.Browser.any3d\n    L.DomUtil.addClass(\n      this._canvas,\n      'leaflet-zoom-' + (animated ? 'animated' : 'hide')\n    )\n\n    return canvas\n  },\n\n  _onAnimZoom(ev) {\n    // 缩放倍率\n    var scale = this._map.getZoomScale(ev.zoom)\n\n    // 缩放时地图产生的 css 像素偏移量\n    var offset = this._map._latLngBoundsToNewLayerBounds(\n      this._map.getBounds(),\n      ev.zoom,\n      ev.center\n    ).min\n\n    // 增加 canvas dom css 像素偏移量 及 缩放倍率\n    if (L.Browser.any3d) {\n      L.DomUtil.setTransform(this._canvas, offset, scale)\n    } else {\n      L.DomUtil.setPosition(this._canvas, offset)\n    }\n  },\n\n  /**\n   * 保证窗口大小变化时 canvas 标签始终可以覆盖地图\n   */\n  _onLayerDidResize: function() {\n    const { x, y } = this._map.getSize()\n    // 浏览器绘制 css像素 与 显示器物理像素 的比例\n    // const pixelRatio = window.devicePixelRatio || 2\n    const pixelRatio = 2\n\n    // canvas dom 在 document 中的实际像素大小\n    this._canvas.style.width = `${x}px`\n    this._canvas.style.height = `${y}px`\n\n    // canvas API 绘制图形画布像素大小\n    this._canvas.width = x * pixelRatio\n    this._canvas.height = y * pixelRatio\n  },\n\n  /**\n   * 地图移动触发\n   */\n  _onLayerDidMove: function() {\n    // 重绘 canvas\n    this._update()\n  },\n\n  /**\n   * 触发事件执行对应函数 onAdd 时初始化\n   */\n  getEvents() {\n    var events = {\n      resize: this._onLayerDidResize, // 浏览器视口大小变化\n      moveend: this._onLayerDidMove // 地图移动\n    }\n\n    // 当开启 地图 css3 动画过渡时增加此事件\n    if (this._zoomAnimated) {\n      events.zoomanim = this._onAnimZoom\n    }\n\n    return events\n  },\n\n  _update() {\n    const { _ctx: ctx, _map: map, _canvas: canvas } = this\n\n    // 固定 canvas 位置在地图左上角\n    const topLeft = map.containerPointToLayerPoint([0, 0])\n    L.DomUtil.setPosition(canvas, topLeft)\n    this.clearCavnas(ctx, canvas)\n\n    this.drawLayer()\n  },\n\n  /**\n   * canvas 绘制\n   */\n  drawLayer: function() {\n    console.warn('如自定义新的继承类，请实现此方法')\n  },\n\n  /**\n   * 清空自定义 canvas 绘制内容\n   */\n  clearCavnas(ctx, canvas) {\n    ctx.restore()\n    const { width, height } = canvas\n    ctx.clearRect(0, 0, width, height)\n  }\n})\n"],"names":["L","Canvas","CustomCanvas","_instance","drawLayer","options","latlngs","_map","map","this","res","item","latlng","lat","lng","latLngToContainerPoint","deg","drawShip","_ctx","ctx","forEach","index","x","y","restore","translate","save","rotate","Math","PI","beginPath","lineWidth","moveTo","lineTo","fillStyle","fill","stroke","canvas","CanvasShip","Layer","extend","initialize","setOptions","onAdd","tiles","_container","getContainer","_initCanvas","pane","getPanes","_panes","overflowPane","appendChild","on","getEvents","_update","onRemove","_canvas","remove","DomUtil","create","getContext","style","zIndex","_onLayerDidResize","animated","zoomAnimation","Browser","any3d","addClass","_onAnimZoom","ev","scale","getZoomScale","zoom","offset","_latLngBoundsToNewLayerBounds","getBounds","center","min","setTransform","setPosition","getSize","width","height","_onLayerDidMove","events","resize","moveend","_zoomAnimated","zoomanim","topLeft","containerPointToLayerPoint","clearCavnas","console","warn","clearRect"],"mappings":"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"}